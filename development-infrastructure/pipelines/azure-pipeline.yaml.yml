parameters:
  - name: container_name
    type: string
    default: 'ct-terraform-state-129'
trigger:
  branches:
    include:
    - main
  paths:
    include:
    - development-infrastructure/
    exclude:
    - development-infrastructure/pipelines
pool:
  name: Azure Pipelines
  vmImage: 'ubuntu-18.04'
variables:
- group: Terraform Backend
- name: system.debug
  value: false

stages:
  - stage: Validate
    jobs:
    - job: ValidateInstall
      steps:
      - task: CmdLine@2
        displayName: Terraform Init
        inputs:
          workingDirectory: development-infrastructure
          #replace 'example-key1' with your key from key vault. Pipelines > Library > Variable groups
          script: terraform init -backend-config="access_key=$(stateterraform129-key1)"
          
          

      - task: CmdLine@2
        displayName: Terraform Validate
        inputs:
          script: terraform validate
          workingDirectory: development-infrastructure

  - stage: Plan
    jobs:
    - job: Plan
      steps: 
        - task: CmdLine@2
          displayName: Terraform Init
          inputs:
            #replace 'example-key1' with your key from key vault. Pipelines > Library > Variable groups
            script: terraform init -backend-config="access_key=$(stateterraform129-key2)"
            workingDirectory: $(System.DefaultWorkingDirectory)/development-infrastructure/

       # - template: task-create-storage-container.yml
       #   parameters:
       #     container_name: ${{ parameters.container_name }}
        - task: CmdLine@2
          displayName: Terraform Plan
          inputs:
            #replace spn-client-id, spn-client-secret and spn-tenant-id with values from key vault. Pipelines > Library > Variable groups
            script: terraform plan -input=false -out=tfplan -var="spn-client-id=$(terraform-azdevops-spn-client-id)" -var="spn-client-secret=$(terraform-azdevops-spn-secret)" -var="spn-tenant-id=$(terraform-azdevops-spn-tenant-id)"
            workingDirectory: development-infrastructure

        - task: CopyFiles@2
          displayName: Copy plan file
          inputs:
            SourceFolder: $(System.DefaultWorkingDirectory)/development-infrastructure/
            Contents: 'tfplan'
            TargetFolder: $(Build.ArtifactStagingDirectory)
          condition: succeededOrFailed()

        - task: PublishPipelineArtifact@1
          displayName: Publish Pipeline Artifact
          inputs:
            artifactName: terraformPlan-$(Build.BuildId)
            targetPath: $(Build.ArtifactStagingDirectory)

    - job: waitForValidation
      dependsOn: Plan
      displayName: Wait for external validation
      pool: server
      timeoutInMinutes: 4320 # job times out in 3 days
      steps:
      - task: ManualValidation@0
        timeoutInMinutes: 1440 # task times out in 1 day
        inputs:
          notifyUsers: |
            your@email.com
          instructions: 'Please validate the build configuration and resume'
          onTimeout: 'resume' #reject

  - stage: Apply
    jobs:
    - job: Apply
      steps: 

        - task: CmdLine@2
          displayName: Terraform Init
          inputs:
            #replace 'example-key1' with your key from key vault. Pipelines > Library > Variable groups
            script: terraform init -backend-config="access_key=$(stateterraform129-key1)"
            workingDirectory: $(System.DefaultWorkingDirectory)/development-infrastructure/

        - task: DownloadPipelineArtifact@2
          inputs:
            artifactName: terraformPlan-$(Build.BuildId)
            targetPath: $(Build.Repository.LocalPath)/development-infrastructure/
            buildType: 'current'

        - task: TerraformCLI@0
          displayName: Terraform apply
          inputs:
            command: apply
            workingDirectory: $(System.DefaultWorkingDirectory)/development-infrastructure/
            runAzLogin: true
            commandOptions: -input=false tfplan